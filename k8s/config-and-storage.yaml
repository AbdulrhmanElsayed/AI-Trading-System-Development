# Persistent Volume Claims for Trading System
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: trading-system
  labels:
    app: postgres
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timescaledb-pvc
  namespace: trading-system
  labels:
    app: timescaledb
    component: timeseries-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: trading-system
  labels:
    app: redis
    component: cache
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: trading-system
  labels:
    component: shared-storage
    type: logs
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: trading-system
  labels:
    component: shared-storage
    type: data
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: models-pvc
  namespace: trading-system
  labels:
    component: shared-storage
    type: models
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
---
# ConfigMap for Trading System Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-config
  namespace: trading-system
  labels:
    app: trading-system
    component: configuration
data:
  config.yaml: |
    environment: production
    
    logging:
      level: INFO
      format: json
      
    database:
      pool_size: 10
      max_overflow: 20
      pool_timeout: 30
      
    redis:
      pool_size: 10
      timeout: 5
      
    trading:
      max_positions: 10
      max_portfolio_risk: 0.02
      max_position_size: 0.1
      
    ml:
      model_update_interval: 3600  # 1 hour
      feature_cache_ttl: 300       # 5 minutes
      
    monitoring:
      metrics_interval: 60
      alert_thresholds:
        memory_usage: 0.85
        cpu_usage: 0.80
        error_rate: 0.05
        
    api_limits:
      alpha_vantage:
        calls_per_minute: 5
        calls_per_day: 500
      finnhub:
        calls_per_minute: 60
        calls_per_day: 1000
---
# Secrets Template (values should be base64 encoded)
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: trading-system
  labels:
    app: postgres
    component: database
type: Opaque
data:
  username: dHJhZGluZ191c2Vy  # trading_user
  password: # Base64 encoded password - set during deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: timescaledb-secret
  namespace: trading-system
  labels:
    app: timescaledb
    component: timeseries-database
type: Opaque
data:
  username: dGltZXNjYWxlX3VzZXI=  # timescale_user
  password: # Base64 encoded password - set during deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: trading-system
  labels:
    app: redis
    component: cache
type: Opaque
data:
  password: # Base64 encoded password - set during deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: database-urls
  namespace: trading-system
  labels:
    component: configuration
type: Opaque
data:
  postgres-url: # Base64 encoded PostgreSQL URL - set during deployment
  timescale-url: # Base64 encoded TimescaleDB URL - set during deployment
  redis-url: # Base64 encoded Redis URL - set during deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: trading-system
  labels:
    component: configuration
type: Opaque
data:
  alpha-vantage: # Base64 encoded Alpha Vantage API key - set during deployment
  finnhub: # Base64 encoded Finnhub API key - set during deployment
---
apiVersion: v1
kind: Secret
metadata:
  name: broker-keys
  namespace: trading-system
  labels:
    component: configuration
type: Opaque
data:
  alpaca-api-key: # Base64 encoded Alpaca API key - set during deployment
  alpaca-secret-key: # Base64 encoded Alpaca secret key - set during deployment
---
# Horizontal Pod Autoscaler for Data Processor
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: data-processor-hpa
  namespace: trading-system
  labels:
    app: data-processor
    component: data-processing
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: data-processor-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
# Horizontal Pod Autoscaler for ML Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-service-hpa
  namespace: trading-system
  labels:
    app: ml-service
    component: machine-learning
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-service-deployment
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Scale down slowly for ML workloads
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
---
# Horizontal Pod Autoscaler for Risk Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: risk-service-hpa
  namespace: trading-system
  labels:
    app: risk-service
    component: risk-management
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: risk-service-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
---
# Horizontal Pod Autoscaler for Execution Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: execution-service-hpa
  namespace: trading-system
  labels:
    app: execution-service
    component: order-execution
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: execution-service-deployment
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 60
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 15  # Scale up quickly for execution
      policies:
      - type: Percent
        value: 200
        periodSeconds: 15
---
# Horizontal Pod Autoscaler for Trading App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: trading-app-hpa
  namespace: trading-system
  labels:
    app: trading-app
    component: main-application
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trading-app-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 65
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 33
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30