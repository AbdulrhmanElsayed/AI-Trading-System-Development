version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      POSTGRES_DB: trading_system
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trading_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_system"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped

  # TimescaleDB (extends PostgreSQL with time-series capabilities)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: trading-timescaledb
    environment:
      POSTGRES_DB: market_data
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_pass}
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timescale_user -d market_data"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - trading-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network
    restart: unless-stopped

  # Data Processing Service
  data-processor:
    build:
      context: .
      target: data-processor
    container_name: trading-data-processor
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - TIMESCALE_URL=postgresql://timescale_user:${TIMESCALE_PASSWORD:-timescale_pass}@timescaledb:5432/market_data
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ML Service
  ml-service:
    build:
      context: .
      target: ml-service
    container_name: trading-ml-service
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/1
      - ML_MODEL_PATH=/app/models
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-processor:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Risk Management Service
  risk-service:
    build:
      context: .
      target: risk-service
    container_name: trading-risk-service
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/2
      - MAX_PORTFOLIO_RISK=0.02
      - MAX_POSITION_SIZE=0.1
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Execution Service
  execution-service:
    build:
      context: .
      target: execution-service
    container_name: trading-execution-service
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/3
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      - IB_HOST=${IB_HOST:-127.0.0.1}
      - IB_PORT=${IB_PORT:-7497}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      risk-service:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring Service
  monitoring-service:
    build:
      context: .
      target: monitoring-service
    container_name: trading-monitoring-service
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/4
    volumes:
      - ./logs:/app/logs
    ports:
      - "9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Main Trading Application
  trading-app:
    build:
      context: .
      target: production
    container_name: trading-main-app
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-trading_pass}@postgres:5432/trading_system
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/5
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      data-processor:
        condition: service_healthy
      ml-service:
        condition: service_healthy
      risk-service:
        condition: service_healthy
      execution-service:
        condition: service_healthy
      monitoring-service:
        condition: service_healthy
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    networks:
      - trading-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trading-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - trading-network
    restart: unless-stopped

  # TimescaleDB for time series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb-trading
    environment:
      POSTGRES_DB: market_data
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: ${TIMESERIES_PASSWORD:-timescale123}
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./sql/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - trading-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: redis-trading
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-trading
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - trading-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-trading
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - trading-network
    restart: unless-stopped

  # Jupyter for analysis
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: jupyter-trading
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-trading123}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    ports:
      - "8888:8888"
    networks:
      - trading-network
    restart: unless-stopped

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data:
  timescale_data:
  redis_data:
  prometheus_data:
  grafana_data: